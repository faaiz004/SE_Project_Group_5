import mongoose from 'mongoose';

const clothesSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
<<<<<<< HEAD
      trim: true, 
=======
      trim: true, // Removes whitespace from both ends of a string
>>>>>>> 8daf48a405e3121c6672ac216edd4042645795bd
    },
    brand: {
      type: String,
      required: true,
      trim: true,
    },
    size: {
      type: String,
      // Enum ensures size must be one of these values
      enum: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
<<<<<<< HEAD
      default: 'M', 
=======
      default: 'M', // Default size if none is provided
>>>>>>> 8daf48a405e3121c6672ac216edd4042645795bd
      required: true,
    },
    category: {
      type: String,
      trim: true,
<<<<<<< HEAD
      default: 'Unknown', 
      required: true,
=======
      default: 'Unknown', // Default category if none is provided
      required: true,
      // --- MODIFIED ENUM ---
      // Added the categories generated by the bulk push script
      // to the original list.
>>>>>>> 8daf48a405e3121c6672ac216edd4042645795bd
      enum: [
          'Modern',
          'Modern/Old_Money',
          'Smart_Casual/Casual_Everyday',
          'Smart_Casual',
          'Casual_Everyday'
<<<<<<< HEAD
        ],
=======
          // Add 'Misc' if your script could potentially generate it, although unlikely with current mapping
          // 'Misc'
        ],
      // --- END MODIFICATION ---
>>>>>>> 8daf48a405e3121c6672ac216edd4042645795bd
    },
    price: {
      type: Number,
      required: true,
<<<<<<< HEAD
      min: [0, 'Price cannot be negative'],
    },
    upper: {
      type: Boolean,
      default: false,
    },
    lower: {
      type: Boolean,
      default: false,
=======
      min: [0, 'Price cannot be negative'], // Ensure price is not negative
>>>>>>> 8daf48a405e3121c6672ac216edd4042645795bd
    },
    
    upper: {
      type: Boolean,
      default: false,
    },

    lower: {
      type: Boolean,
      default: false,
    },
    
    imageUrl: {
      type: String,
      trim: true,
<<<<<<< HEAD
      default: '', 
      required: true,
    },

    lower: {
      type: Boolean,
      default: false, 
    },

    upper: {
      type: Boolean,
      default: false, 
    },

    gender: {
      type: String,
      enum: ['male', 'female', 'unisex'],
=======
      default: '', // Default image URL if none provided (though required is true)
      required: true,
    },
    lower: {
      type: Boolean,
      default: false, // Default to false if not specified
    },
    upper: {
      type: Boolean,
      default: false, // Default to false if not specified
>>>>>>> 8daf48a405e3121c6672ac216edd4042645795bd
    },

  },
  {
<<<<<<< HEAD
=======

>>>>>>> 8daf48a405e3121c6672ac216edd4042645795bd
    timestamps: true,
    collection: 'clothes',
  }
);
<<<<<<< HEAD
const Clothes = mongoose.models.Clothes || mongoose.model('Clothes', clothesSchema);
=======

// Optional: Add indexes for faster querying on frequently searched fields
// clothesSchema.index({ brand: 1 });
// clothesSchema.index({ category: 1 });
// clothesSchema.index({ price: 1 });

// Create the Mongoose model from the schema
const Clothes = mongoose.model('Clothes', clothesSchema);

// Export the model to be used elsewhere in your application
>>>>>>> 8daf48a405e3121c6672ac216edd4042645795bd
export default Clothes;